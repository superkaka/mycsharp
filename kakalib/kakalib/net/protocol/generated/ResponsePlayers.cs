// These Codes are generated by kakaTools ProtocolGenerater v1.3
// ------------------------------------------------------------------
//
// Copyright (c) 2010——2016 linchen.
// All rights reserved.
//
// Email: superkaka.org@gmail.com
//
// ------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using KLib.utils;

namespace protocol.vo
{
    //返回玩家列表
    public class ResponsePlayers : BaseProtocolVO
    {
        
        static public ResponsePlayers CreateInstance()
        {
            return new ResponsePlayers();
        }
        
        //
        public bool status;
        //玩家列表
        public PlayerInfo[] players;
        
        
        public ResponsePlayers() : base(MessageType.ResponsePlayers)
        {

        }
        
        override public void decode(EndianBinaryReader binReader)
        {
        
            status = binReader.ReadBoolean();
            
            var len_players = binReader.ReadUInt16();
            players = new PlayerInfo[len_players];
            for (int i = 0; i < len_players; i++)
            {
                players[i] = new PlayerInfo();
            players[i].decode(binReader);
            }
            
        }
        
        override public void encode(EndianBinaryWriter binWriter)
        {
        
            binWriter.Write(status);
            
			ushort len_players = (ushort)players.Length;
			binWriter.Write(len_players);
            for (int i = 0; i < len_players; i++)
            {
                players[i].encode(binWriter);
            }
            
        }
        
        public delegate void MessageHandler(ResponsePlayers msg);
        static private List<MessageHandler> list_handler = new List<MessageHandler>();
        
        static public void RegisterHandler(MessageHandler handler)
        {
            list_handler.Add(handler);
        }

        static public void CallHandler(ResponsePlayers msg)
        {
            int i = 0;
            while (i < list_handler.Count)
            {
                var handler = list_handler[i];
                //对象被回收了的  自动移除
                if (handler.Target == null || handler.Target.ToString() == "null")
                {
                    list_handler.RemoveAt(i);
                    continue;
                }
                try
                {
                    handler(msg);
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }
                i++;
            }
        }
    }

}
