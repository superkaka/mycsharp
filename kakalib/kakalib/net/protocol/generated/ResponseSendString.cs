// These Codes are generated by kakaTools ProtocolGenerater v1.3
// ------------------------------------------------------------------
//
// Copyright (c) 2010——2016 linchen.
// All rights reserved.
//
// Email: superkaka.org@gmail.com
//
// ------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using KLib.utils;

namespace protocol.vo
{
    //
    public class ResponseSendString : BaseProtocolVO
    {
        
        static public ResponseSendString CreateInstance()
        {
            return new ResponseSendString();
        }
        
        //内容
        public string content;
        
        
        public ResponseSendString() : base(MessageType.ResponseSendString)
        {

        }
        
        override public void decode(EndianBinaryReader binReader)
        {
        
            content = binReader.ReadUTF();
            
        }
        
        override public void encode(EndianBinaryWriter binWriter)
        {
        
            binWriter.WriteUTF(content);
            
        }
        
        public delegate void MessageHandler(ResponseSendString msg);
        static private List<MessageHandler> list_handler = new List<MessageHandler>();
        
        static public void RegisterHandler(MessageHandler handler)
        {
            list_handler.Add(handler);
        }

        static public void CallHandler(ResponseSendString msg)
        {
            int i = 0;
            while (i < list_handler.Count)
            {
                var handler = list_handler[i];
                //对象被回收了的  自动移除
                if (handler.Target == null || handler.Target.ToString() == "null")
                {
                    list_handler.RemoveAt(i);
                    continue;
                }
                try
                {
                    handler(msg);
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }
                i++;
            }
        }
    }

}
