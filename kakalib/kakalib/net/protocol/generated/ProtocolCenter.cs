// These Codes are generated by kakaTools ProtocolGenerater v1.3
// ------------------------------------------------------------------
//
// Copyright (c) 2010——2016 linchen.
// All rights reserved.
//
// Email: superkaka.org@gmail.com
//
// ------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using protocol.vo;

namespace protocol
{
    public delegate void CommonMessageHandler(BaseProtocolVO vo);
    public class ProtocolCenter : IProtocolVOCreater
    {
        
        private Dictionary<int, Func<BaseProtocolVO>> dic_creater = new Dictionary<int, Func<BaseProtocolVO>>();
        
        static private Dictionary<MessageType, List<CommonMessageHandler>> dic_handler = new Dictionary<MessageType, List<CommonMessageHandler>>();
        
        public BaseProtocolVO CreateProtocolVO(int messageId)
        {
            return dic_creater[messageId]();
        }
        
        public BaseProtocolVO CreateProtocolVO(MessageType messageType)
        {
            return CreateProtocolVO((int)messageType);
        }
        
        public void RegisterCreater(MessageType messageType, Func<BaseProtocolVO> packageCreateFun)
        {
            dic_creater[(int)messageType] = packageCreateFun;
        }
        
        static public void RegisterMessageHandler(MessageType messageType, CommonMessageHandler handler)
        {
            
            List<CommonMessageHandler> list_handler;
            if (dic_handler.TryGetValue(messageType, out list_handler) == false)
            {
                list_handler = dic_handler[messageType] = new List<CommonMessageHandler>();
            }
            list_handler.Add(handler);

        }
        
        public ProtocolCenter()
        {
            
            RegisterCreater(MessageType.RequestSendString, RequestSendString.CreateInstance);
            
            RegisterCreater(MessageType.ResponseSendString, ResponseSendString.CreateInstance);
            
            RegisterCreater(MessageType.RequestPlayers, RequestPlayers.CreateInstance);
            
            RegisterCreater(MessageType.ResponsePlayers, ResponsePlayers.CreateInstance);
            
        }
        
        static public void DispatchMessage(BaseProtocolVO msg)
        {
            
            List<CommonMessageHandler> list_handler;
            if (dic_handler.TryGetValue(msg.MessageType, out list_handler))
            {
                int i = 0;
                while (i < list_handler.Count)
                {
                    var handler = list_handler[i];
                    //对象被回收了的  自动移除
                    if (handler.Target == null || handler.Target.ToString() == "null")
                    {
                        list_handler.RemoveAt(i);
                        continue;
                    }
                    try
                    {
                        handler(msg);
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine(e.Message);
                    }
                    i++;
                }
            }
            
            switch (msg.MessageType)
            {

                case MessageType.RequestSendString:
                    RequestSendString.CallHandler((RequestSendString)msg);
                    break;

                case MessageType.ResponseSendString:
                    ResponseSendString.CallHandler((ResponseSendString)msg);
                    break;

                case MessageType.RequestPlayers:
                    RequestPlayers.CallHandler((RequestPlayers)msg);
                    break;

                case MessageType.ResponsePlayers:
                    ResponsePlayers.CallHandler((ResponsePlayers)msg);
                    break;

            }
        }
        
        
        
    }
}
