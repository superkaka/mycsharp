<root>
  <config language="C#">
    <language>as3</language>
    <classExtension>.as</classExtension>
    <!-- true 将生成的vo写入同一份代码文件，使用代码模板中"SingleProtocolFile"节点，false 将为每个vo生成单独的代码文件输出到voFolder指定的子目录 -->
    <singleMode>false</singleMode>
    <!-- singleMode为false时，vo代码输出的子文件夹路径 -->
    <voFolder>vo</voFolder>
    <classNameTail>VO</classNameTail>
  </config>
  <definitionMember>
    <![CDATA[//$(comment)
        public var $(member):$(className);
        ]]>
  </definitionMember>
  <definitionArray>
    <![CDATA[//$(comment)
        public var $(member):Vector.<$(className)>;
        ]]>
  </definitionArray>
  <accessArray>
    <![CDATA[
    $(member)[i]
    ]]>
  </accessArray>
  <decodeArray>
    <![CDATA[
            var len_$(member):int = binReader.readUnsignedShort();
            $(member) = new Vector.<$(className)>();
            for (var i:int = 0; i < len_$(member); i++)
            {
$(decode)
            }
            ]]>
  </decodeArray>
  <encodeArray>
    <![CDATA[
			var len_$(member):int = $(member).length;
			binWriter.writeShort(len_$(member));
            for (var i:int = 0; i < len_$(member); i++)
            {
$(encode)
            }
            ]]>
  </encodeArray>
  <params>
    <param type="byte" class="int">
      <decode>
        <![CDATA[
            $(member) = binReader.readByte();
            ]]>
      </decode>
      <encode>
        <![CDATA[
            binWriter.writeByte($(member));
            ]]>
      </encode>
    </param>
    <param type="bin" class="ByteArray">
      <decode>
        <![CDATA[
            $(member) = new ByteArray();
            binReader.readBytes($(member), 0, binReader.readInt());
            ]]>
      </decode>
      <encode>
        <![CDATA[
            binWriter.writeInt($(member).length);
            binWriter.writeBytes($(member));
            ]]>
      </encode>
    </param>
    <param type="bool" class="Boolean">
      <decode>
        <![CDATA[
            $(member) = binReader.readBoolean();
            ]]>
      </decode>
      <encode>
        <![CDATA[
            binWriter.writeBoolean($(member));
            ]]>
      </encode>
    </param>
    <param type="short" class="int">
      <decode>
        <![CDATA[
            $(member) = binReader.readShort();
            ]]>
      </decode>
      <encode>
        <![CDATA[
            binWriter.writeShort($(member));
            ]]>
      </encode>
    </param>
    <param type="ushort" class="uint">
      <decode>
        <![CDATA[
            $(member) = binReader.readUnsignedShort();
            ]]>
      </decode>
      <encode>
        <![CDATA[
            binWriter.writeShort($(member));
            ]]>
      </encode>
    </param>
    <param type="int" class="int">
      <decode>
        <![CDATA[
            $(member) = binReader.readInt();
            ]]>
      </decode>
      <encode>
        <![CDATA[
            binWriter.writeInt($(member));
            ]]>
      </encode>
    </param>
    <param type="uint" class="uint">
      <decode>
        <![CDATA[
            $(member) = binReader.readUnsignedInt();
            ]]>
      </decode>
      <encode>
        <![CDATA[
            binWriter.writeUnsignedInt($(member));
            ]]>
      </encode>
    </param>
    <param type="long" class="Number">
      <decode>
        <![CDATA[
            $(member) = binReader.readDouble();
            ]]>
      </decode>
      <encode>
        <![CDATA[
            binWriter.writeDouble($(member));
            ]]>
      </encode>
    </param>
    <param type="ulong" class="Number">
      <decode>
        <![CDATA[
            $(member) = binReader.readDouble();
            ]]>
      </decode>
      <encode>
        <![CDATA[
            binWriter.writeDouble($(member));
            ]]>
      </encode>
    </param>
    <param type="float" class="Number">
      <decode>
        <![CDATA[
            $(member) = Number(binReader.readFloat());
            ]]>
      </decode>
      <encode>
        <![CDATA[
            binWriter.writeFloat($(member));
            ]]>
      </encode>
    </param>
    <param type="string" class="String">
      <decode>
        <![CDATA[
            $(member) = binReader.readUTF();
            ]]>
      </decode>
      <encode>
        <![CDATA[
            binWriter.writeUTF($(member));
            ]]>
      </encode>
    </param>
    <param type="date" class="Date">
      <decode>
        <![CDATA[
            $(member) = binReader.readDate();
            ]]>
      </decode>
      <encode>
        <![CDATA[
            binWriter.writeDate($(member));
            ]]>
      </encode>
    </param>
    <param type="struct" class="struct">
      <decode>
        <![CDATA[
            $(member) = new $(className)();
            $(member).decode(binReader);
            ]]>
      </decode>
      <encode>
        <![CDATA[
            $(member).encode(binWriter);
            ]]>
      </encode>
    </param>
  </params>

  <ProtocolVOClass>
    <![CDATA[
package protocol.vo
{
	import flash.utils.ByteArray;
	import protocol.*;
	import org.superkaka.KLib.net.protocol.*;

    //$(comment)
    public class $(className) extends BaseVO
    {
        
        $(definition)
        
        public function $(className)():void
        {
			super(Protocol.$(messageName));
        }
        
        override public function decode(binReader:ProtocolByteArray):void
        {
		$(decode)
        }
        
        override public function encode(binWriter:ProtocolByteArray):void
        {
		$(encode)
        }
        
    }

}

]]>
  </ProtocolVOClass>
  <StructClass>
    <![CDATA[
package protocol.vo
{
	import flash.utils.ByteArray;
  import protocol.*;
	import org.superkaka.KLib.net.protocol.*;

    //$(comment)
    public class $(className)
    {
        
        $(definition)
        
        public function decode(binReader:ProtocolByteArray):void
        {
		$(decode)
        }
        
        public function encode(binWriter:ProtocolByteArray):void
        {
		$(encode)
        }
        
    }

}
]]>
  </StructClass>

  <ProtocolEnumClass fileName="Protocol.as" >
    <![CDATA[
package protocol
{
    public class Protocol
    {
        $(content)
    }
}
]]>
  </ProtocolEnumClass>
  <definitionEnum>
    <![CDATA[
        //$(comment)
        static public const $(member):int = $(value);
        ]]>
  </definitionEnum>
  <MessageRegisterClass fileName="MessageRegister.as" >
    <![CDATA[
package protocol
{
	import protocol.vo.*;
	import org.superkaka.KLib.net.protocol.*;
	
    public class MessageRegister
    {
        
        static public function getTranslator():PackageTranslator
        {
            var translator:PackageTranslator = new PackageTranslator();
            register(translator);
            return translator;
        }
        
        static public function register(target:PackageTranslator):void
        {
            $(content)
        }
        
        $(creater)
		
    }
}
]]>
  </MessageRegisterClass>
  <MessageRegister>
    <![CDATA[
            target.RegisterMessage(Protocol.$(member), Create_$(className));
        ]]>
  </MessageRegister>
  <MessageCreater>
    <![CDATA[
        static public function Create_$(className)():BaseVO
        {
            return new $(className)();
        }
        ]]>
  </MessageCreater>
</root>